name: Generate packages
on: [push]
jobs:
  releasecheck:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install python libraries
        run: python -m pip install tomli requests semver
      - name: Check release
        run: python releasecheck.py commitcheck
  build-appimage:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    needs: [releasecheck]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install python libraries
        run: pip install poetry build
      - name: Initialise venv
        run: |
          python -m poetry install
          python -m poetry update
          python -m poetry check
      - name: Build wheel
        run: |
          python -m poetry run python setup.py build
          python -m poetry run python -m build
      - name: Determine version
        run: |
          echo "ARC2VERSION=$(python -m poetry run python -c 'from arc2control import version; print(version.__version__)')" >> $GITHUB_ENV
      - name: Install python-appimage
        run: |
          poetry run pip install python-appimage
          sed -i 's/import importlib/import importlib.util/g' $(poetry show -v | grep "Using virtualenv" | awk '{print $3}')/lib/python$(python -V | awk '{ print $2 }' | awk -F'.' '{ print $1"."$2 }')/site-packages/python_appimage/utils/compat.py
      - name: Build appimage
        run: |
          poetry run ./appimage/build.sh
          mv ArC2Control-x86_64.AppImage ArC2Control-${{ env.ARC2VERSION }}-x86_64.AppImage
      - name: Gather files
        uses: actions/upload-artifact@v3
        with:
          name: ArC2Control-${{ env.ARC2VERSION }}-AppImage
          path: ArC2Control-${{ env.ARC2VERSION }}-x86_64.AppImage
  build-windows-packages:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    needs: [releasecheck]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install python libraries
        run: pip install poetry build
      - name: Initialise venv
        run: |
          python -m poetry install
          python -m poetry update
          python -m poetry check
      - name: Install PyInstaller
        run: python -m poetry run pip install PyInstaller
      - name: Build wheel
        run: |
          python -m poetry run python setup.py build
          python -m poetry run python -m build
      - name: Determine version
        run: |
          $version = python -m poetry run python -c 'from arc2control import version; print(version.__version__)'
          echo "ARC2VERSION=$version" >> $env:GITHUB_ENV
      - name: Build unified exe
        run: python -m poetry run pyinstaller pyi/ArC2Control.spec
      - name: Build installer
        run: |
          cd pyi
          ISCC.exe /dAppVersion=${{ env.ARC2VERSION }} .\win32-installer.iss
          cd ..
        shell: pwsh
      - name: Gather installer
        uses: actions/upload-artifact@v3
        with:
          name: ArC2Control-${{ env.ARC2VERSION }}-Setup
          path: dist/ArC2Control-${{ env.ARC2VERSION }}-Setup.exe
      - name: Zip portable executable
        run: |
          cd dist
          Compress-Archive arc2control arc2control-${{ env.ARC2VERSION }}-Portable.zip
        shell: pwsh
      - name: Gather portable executable
        uses: actions/upload-artifact@v3
        with:
          name: ArC2Control-${{ env.ARC2VERSION }}-Portable
          path: dist/ArC2Control-${{ env.ARC2VERSION }}-Portable.zip
